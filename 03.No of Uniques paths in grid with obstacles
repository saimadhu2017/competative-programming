class Solution {
    ArrayList<String> obLocation=new ArrayList<String>();
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        
        for(int i=0;i<obstacleGrid.length;i++){
            for(int j=0;j<obstacleGrid[0].length;j++){
                if(obstacleGrid[i][j]==1){
                    obLocation.add(i+","+j);
                }
            }
        }
        
        return(f(obstacleGrid.length,obstacleGrid[0].length,0,0));
    }
    
    HashMap<String,Integer> map=new HashMap<String,Integer>();
    
    public int f(int n,int m,int i,int j){
        if(map.containsKey(n+","+m)){
            return(map.get(n+","+m));
        }
        if(obLocation.contains(i+","+j)){
            return(0);
        }
        if(n==0 || m==0){
            return(0);
        }
        if(n==1 && m==1){
            return(1);
        }
        map.put((n+","+m),(f(n-1,m,i+1,j)+f(n,m-1,i,j+1)));
        return(map.get(n+","+m));
    }
}
