-----------------------------------------solution 1: top to bottom
class Solution {
    ArrayList<String> obLocation=new ArrayList<String>();
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        
        for(int i=0;i<obstacleGrid.length;i++){
            for(int j=0;j<obstacleGrid[0].length;j++){
                if(obstacleGrid[i][j]==1){
                    obLocation.add(i+","+j);
                }
            }
        }
        
        return(f(obstacleGrid.length,obstacleGrid[0].length,0,0));
    }
    
    HashMap<String,Integer> map=new HashMap<String,Integer>();
    
    public int f(int n,int m,int i,int j){
        if(map.containsKey(n+","+m)){
            return(map.get(n+","+m));
        }
        if(obLocation.contains(i+","+j)){
            return(0);
        }
        if(n==0 || m==0){
            return(0);
        }
        if(n==1 && m==1){
            return(1);
        }
        map.put((n+","+m),(f(n-1,m,i+1,j)+f(n,m-1,i,j+1)));
        return(map.get(n+","+m));
    }
}
---------------------------------------------solution 2: taulation
class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        
        if(obstacleGrid[0][0]==1){
            return(0);
        }
        
        int[][] dp=new int[obstacleGrid.length+1][obstacleGrid[0].length+1];
        
        for(int i=0;i<obstacleGrid.length;i++){
            for(int j=0;j<obstacleGrid[0].length;j++){
                if(obstacleGrid[i][j]==1){
                    dp[i+1][j+1]=-1;
                }
            }
        }
        for(int i=0;i<dp.length;i++){
            for(int j=0;j<dp[0].length;j++){
                if(i==0 || j==0){
                    continue;
                }
                else if(i==1 && j==1){
                    dp[i][j]=1;
                }
                else if(dp[i][j]==-1){
                    dp[i][j]=0;
                }else{
                    dp[i][j]=dp[i-1][j]+dp[i][j-1];
                }
            }
        }
        return(dp[obstacleGrid.length][obstacleGrid[0].length]);
    }
    
}
