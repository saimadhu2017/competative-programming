-----------------------------------------------solution 1: top to bottom
public class Main {
    public static void main(String[] args) {
        HashMap<Integer, ArrayList<Integer>> map = new HashMap<>();
        int[] nums = { 4, 5 };
        System.out.println(f(10000, nums, map));
    }

    public static ArrayList<Integer> f(int sum, int[] nums, HashMap<Integer, ArrayList<Integer>> map) {
        ArrayList<Integer> rlist = new ArrayList<Integer>();
        if (sum == 0) {
            return (new ArrayList<Integer>());
        }
        if (sum < 0) {
            return (null);
        }
        if (map.containsKey(sum)) {
            return (map.get(sum));
        }
        for (int i = 0; i < nums.length; i++) {
            int remainder = sum - nums[i];
            rlist = f(remainder, nums, map);
            if (rlist != null) {
                map.put(remainder, rlist);
                rlist.add(nums[i]);
                return (rlist);
            } else {
                map.put(remainder, rlist);
            }
        }
        map.put(sum, rlist);
        return (null);
    }
}
-----------------------------------------------Solution 2: bottom to top
import java.util.*;

public class Main {
    public static void main(String[] args) {
        // int[] nums={5,3,4}; //true
        // int target=7;
        // int[] nums={2,3};//ture
        // int target=7;
        // int[] nums={5,3,4,7};//ture
        // int target=7;
        // int[] nums={2,4};//false
        // int target=7;
        // int[] nums={2,3,5};//true
        // int target=8;
        int[] nums = { 7, 14};//false
        int target = 300;
        System.out.println(f(target, nums));
    }

    public static ArrayList<Integer> f(int sum, int[] arr) {
        ArrayList[] dp=new ArrayList[sum+1];
        dp[0]=new ArrayList<Integer>();
        for(int i=0;i<dp.length;i++){
            if(dp[i]!=null){
                for(int j=0;j<arr.length;j++){
                    if(arr[j]+i<dp.length){
                        ArrayList<Integer> li = new ArrayList<Integer>(dp[i]);
                        li.add(arr[j]);
                        dp[arr[j] + i] = li;
                    }
                }
            }
        }
        return(dp[sum]);
    }
}
