-------------------------------------solution 1: top to bottom
import java.util.*;

public class Main {
    public static void main(String[] args) {
        int[] arr = { 7, 14 };
        HashMap<Integer, Boolean> map = new HashMap<>();
        System.out.println(f(300, arr, map));
    }

    public static boolean f(int sum, int[] arr, HashMap<Integer, Boolean> map) {
        if (map.containsKey(sum)) {
            return (map.get(sum));
        }
        if (sum == 0) {
            return (true);
        }
        if (sum < 0) {
            return (false);
        }
        for (int i = 0; i < arr.length; i++) {
            int remainder = sum - arr[i];
            if (f(remainder, arr, map)) {
                map.put(remainder, true);
                return (true);
            } else {
                map.put(remainder, false);
            }
        }
        map.put(sum, false);
        return (false);
    }
}

---------------------------------------------------solution 2: bottom to top

import java.util.*;

public class Main {
    public static void main(String[] args) {
        // int[] nums={5,3,4}; //true
        // int target=7;
        // int[] nums={2,3};//ture
        // int target=7;
        // int[] nums={5,3,4,7};//ture
        // int target=7;
        // int[] nums={2,4};//false
        // int target=7;
        // int[] nums={2,3,5};//true
        // int target=8;
        int[] nums = { 7, 14};//false
        int target = 300;
        System.out.println(f(target, nums));
    }

    public static boolean f(int sum, int[] arr) {
        boolean[] dp=new boolean[sum+1];
        dp[0]=true;
        for(int i=0;i<dp.length;i++){
            if(dp[i]==true){
                for(int j=0;j<arr.length;j++){
                    if(i+arr[j]<dp.length){
                        dp[i+arr[j]]=true;
                    }
                }
            }
        }
        return(dp[sum]);
    }
}
